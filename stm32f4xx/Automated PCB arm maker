/*
 * PCB Arm Project.c
 *
 *  Created on: Oct 20, 2022
 *      Author: gianl
 */


#include "stm32f407xx.h"


uint32_t x=10;
uint32_t y=10;
uint32_t j=10;
uint32_t s=30;
uint32_t checker=0;
uint8_t Position_Number=0;
uint32_t pos[100][3];
uint8_t Position_flg=0;
uint8_t Toggle_Mode_flg=0;
uint8_t Clear_flg=0;
uint8_t Mode=0;
uint32_t Position=1;
uint32_t C=0;
uint32_t timer_counter=0;
uint32_t P1_flg=1;
uint32_t P2_flg=0;
uint32_t P3_flg=0;
uint32_t Finish_flg=0;
uint32_t timer_starter=0;
uint32_t safety=1;
uint32_t safety_x=80; //tbd
uint32_t Flash_Time=10*60;
uint32_t Develop_Time=4*60;
uint32_t Etch_Time=30*60;
uint32_t Slosher = 0; //flag to signify the state of the sloshing motor

void StartUpDelay(void)
{
	for(uint32_t i =0; i<10000;i++);
}

void Delay(void)
{
	for(uint32_t i =0; i<400000;i++);
}

void AutoDelay(void)
{
	for(uint32_t i =0; i<50000;i++);
}

void ServoHandle(void)
{

	if(UD_Inc_Flg)
	{
		x++;
		x=EdgeCondition(x,NOTHAND);
		ServoAngle(TIM4, x, MID);
	}
	else if(UD_Dec_Flg)
	{
		x--;
		x=EdgeCondition(x,NOTHAND);
		ServoAngle(TIM4, x, MID);
	}
	UD_Inc_Flg=0; UD_Dec_Flg=0;

	if(LR_Inc_Flg)
	{
		y++;
		y=EdgeCondition(y,NOTHAND);
		ServoAngle(TIM4, y, BOTTOM);
	}
	else if(LR_Dec_Flg)
	{
		y--;
		y=EdgeCondition(y,NOTHAND);
		ServoAngle(TIM4, y, BOTTOM);
	}
	LR_Inc_Flg=0; LR_Dec_Flg=0;
}


void GPIOInits(void)
{
	GPIO_Handler_t ADCPins;

	ADCPins.pGPIOx = GPIOA;

	ADCPins.GPIO_PinConfig.GPIO_PinMode = ANALOG;
	ADCPins.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
	ADCPins.GPIO_PinConfig.GPIO_PinOPType = PUSHPULL;
	ADCPins.GPIO_PinConfig.GPIO_pinPuPdControl = NOPUPD;
	ADCPins.GPIO_PinConfig.GPIO_PinSpeed = SPEEDHIGH;

	//PWM Pin config
	ADCPins.GPIO_PinConfig.GPIO_PinNumber = 1;//bottom control
	GPIO_Init(&ADCPins);

	ADCPins.GPIO_PinConfig.GPIO_PinNumber = 3;//mid control
	GPIO_Init(&ADCPins);
}

void PWM_GPIOInits(void)
{
	GPIO_Handler_t PWMPins;

	PWMPins.pGPIOx = GPIOB;

	PWMPins.GPIO_PinConfig.GPIO_PinMode = ALTFUNC;
	PWMPins.GPIO_PinConfig.GPIO_PinAltFunMode = AF2;
	PWMPins.GPIO_PinConfig.GPIO_PinOPType = PUSHPULL;
	PWMPins.GPIO_PinConfig.GPIO_pinPuPdControl = NOPUPD;
	PWMPins.GPIO_PinConfig.GPIO_PinSpeed = SPEEDHIGH;  //might need to look into this

	//PWM Pin config
	PWMPins.GPIO_PinConfig.GPIO_PinNumber = 6;//mid
	GPIO_Init(&PWMPins);

	PWMPins.GPIO_PinConfig.GPIO_PinNumber = 7; //bottom
	GPIO_Init(&PWMPins);

	PWMPins.GPIO_PinConfig.GPIO_PinNumber = 9;//grip
	GPIO_Init(&PWMPins);
}

void Button_GPIOInits(void)
{
	GPIO_Handler_t ButtonPins;

	ButtonPins.pGPIOx = GPIOB;

	ButtonPins.GPIO_PinConfig.GPIO_PinMode = OUTPUT;
	ButtonPins.GPIO_PinConfig.GPIO_PinAltFunMode = AF0;
	ButtonPins.GPIO_PinConfig.GPIO_PinOPType = PUSHPULL;
	ButtonPins.GPIO_PinConfig.GPIO_pinPuPdControl = PULLDOWN;
	ButtonPins.GPIO_PinConfig.GPIO_PinSpeed = SPEEDHIGH;  //might need to look into this


	ButtonPins.GPIO_PinConfig.GPIO_PinNumber = 11;
	GPIO_Init(&ButtonPins);

	ButtonPins.GPIO_PinConfig.GPIO_PinNumber = 13;
	GPIO_Init(&ButtonPins);

	ButtonPins.GPIO_PinConfig.GPIO_PinNumber = 3;
	GPIO_Init(&ButtonPins);

	ButtonPins.GPIO_PinConfig.GPIO_PinNumber = 4;
	GPIO_Init(&ButtonPins);

	ButtonPins.GPIO_PinConfig.GPIO_PinNumber = 5;
	GPIO_Init(&ButtonPins);

	ButtonPins.GPIO_PinConfig.GPIO_PinNumber = 0; //pin to drive motor developer sloshing
	GPIO_Init(&ButtonPins);
}

void PWMTIM(void)
{
	TIM_Handler_t TIMPWM;

	TIMPWM.pTIMx = TIM4;
	TIMPWM.TIM_Config.TIM_Direction = UPCNT;
	TIMPWM.TIM_Config.TIM_ARR = 479;
	TIMPWM.TIM_Config.TIM_Prescaler = 99;
	TIMPWM.TIM_Config.TIM_Mode = EDGE;
	TIMPWM.TIM_Config.PWM_Mode = PWM1;
	TIMPWM.TIM_Config.TIM_RestPostion = DISABLE;
	TIMPWM.TIM_Config.TIM_Polarity = POLHIGH;
	TIMPWM.TIM_Config.PWM_Channel = 1;

	PWM2_5_Init(&TIMPWM);

	TIMPWM.TIM_Config.PWM_Channel = 2;

	PWM2_5_Init(&TIMPWM);

	TIMPWM.TIM_Config.PWM_Channel = 3;

	PWM2_5_Init(&TIMPWM);

	TIMPWM.TIM_Config.PWM_Channel = 4;

	PWM2_5_Init(&TIMPWM);
}

void TenMinTimer_Init(void)
{
	BasicTIM_Handler_t TenMin;

	TenMin.pTIMx = TIM6;
	TenMin.TIM_Config.Buffer=0;
	TenMin.TIM_Config.Interrupt=0;
	TenMin.TIM_Config.MMS=2;
	TenMin.TIM_Config.Mode=0;
	TenMin.TIM_Config.Prescaler=1600-1;

	BasicTIM_INIT(&TenMin);

}

void ButtonHandle(void)
{
	Position_flg=GPIO_ReadFromInputPin(GPIOB, 3);
	Toggle_Mode_flg=GPIO_ReadFromInputPin(GPIOB, 4);
	Clear_flg=GPIO_ReadFromInputPin(GPIOB, 5);


	Position_Number = Position_Number + Position_flg;

	//1=PCB Flash
	//2=develop
	//3=etch
	//4=present finished PCB/Waiting for reload for next

	if(Toggle_Mode_flg) //toggles PCB manufacture mode and thumbstick control mode
	{
		Delay();
		Mode ^= 1;
		timer_starter=1;
	}

	if(Clear_flg) //stops auto and clears all stored values
	{
		Mode=0;
		Position=1;
		Position_Number=0;
		TimerStop(TIM6);
		timer_counter  = 0;
		P1_flg         = 1;
		P2_flg         = 0;
		P3_flg         = 0;
		Finish_flg     = 0;
		C              = 0;
		timer_starter=0;
		safety=1;
		Slosher = 0;
	}
}

void PositionSetting(void)
{
	if(Position_flg)
	{
		Delay();
		pos[Position_Number][1]=x;
		pos[Position_Number][0]=y;

	}

	if(Clear_flg) //clears all positions
	{
		Delay();
		for(uint32_t i=0;i<4;i++)
		{
			pos[i][0]=0;
			pos[i][1]=0;
		}

	}
}

void AutoArmMover(void)
{
	if(Mode)
	{
		if(safety)
		{
			if(x > safety_x)
			{
				UD_Dec_Flg=1;
			}
			else if(x < safety_x)
			{
				UD_Inc_Flg=1;
			}
			else
			{
				safety=0;
			}
		}
		else if(C == 0)
		{
			if(y > pos[Position][C])
			{
				LR_Dec_Flg=1;
			}
			else if(y < pos[Position][C])
			{
				LR_Inc_Flg=1;
			}
			else
			{
				C++;
			}
		}
		else if(C == 1)
		{
			if(x > pos[Position][C])
			{
				UD_Dec_Flg=1;
			}
			else if(x < pos[Position][C])
			{
				UD_Inc_Flg=1;
			}
			else
			{
				C=0;

				if(timer_starter)
				{
					TimerStart(TIM6,10000);
					timer_starter=0;
				}

				if(Finish_flg) //ending auto mode and switching back to manual
				{
					Mode=0;
					Position=1;
					Position_Number=0;
					timer_counter=0;
					P1_flg=1;
					P2_flg=0;
					P3_flg=0;
					Finish_flg=0;
					C=0;
					timer_starter=0;
					safety=1;
				}
			}
		}

		AutoDelay();
	}
}

void PCBTimer(void)
{
	if(Mode)
	{
		if(P1_flg) //flashing
		{
			if(TIM6->SR)
			{
				timer_counter++;
				SR_clearer(6);
			}

			if(timer_counter >= Flash_Time)
			{
				TimerStop(TIM6);
				Position++;
				timer_counter=0;
				P1_flg=0;
				P2_flg=1;
				timer_starter=1;
				safety=1;
				C=0;
			}
		}
		else if(P2_flg) // developing
		{
			Slosher = 1;
			if(TIM6->SR)
			{
				timer_counter++;
				SR_clearer(6);
			}

			if(timer_counter >= Develop_Time) // value TBD
			{
				TimerStop(TIM6);
				Position++;
				timer_counter=0;
				P2_flg=0;
				P3_flg=1;
				timer_starter=1;
				safety=1;
				C=0;
				Slosher = 0;
			}
		}
		else if(P3_flg) //etching
		{
			if(TIM6->SR)
			{
				timer_counter++;
				SR_clearer(6);
			}

			if(timer_counter >= Etch_Time) // value TBD
			{
				TimerStop(TIM6);
				Position++;
				timer_counter=0;
				P3_flg=0;
				P1_flg=1;
				Finish_flg=1; //presenting PCB
				safety=1;
				C=0;
			}
		}
	}
}

void DeveloperSlosher(void)
{
	if(Slosher)
	{
		GPIO_WriteToOutputPin(GPIOB, 0, ENABLE);
	}
	else
	{
		GPIO_WriteToOutputPin(GPIOB, 0, DISABLE);
	}
}

void ServoBegin(void)
{
	for(uint32_t i=10; i<=70;i++)
	{
		ServoAngle(TIM4, i, MID);
		ServoAngle(TIM4, i, BOTTOM);
		ServoAngle(TIM4, i+20, GRIP);
		StartUpDelay();
	}
	for(uint32_t i=70; i>10;i--)
	{
		ServoAngle(TIM4, i, MID);
		ServoAngle(TIM4, i, BOTTOM);
		ServoAngle(TIM4, i+20, GRIP);
		StartUpDelay();
	}

}

int main(void)
{
	GPIOInits();
	Button_GPIOInits();
	ADC_Clk_EnorDi(ADC1, ENABLE);
	PWM_GPIOInits();
	TIM2_5_CLKEnable(TIM4, ENABLE); //Enables HSI and TIM3 peripheral clock
	PWMTIM();
	ServoBegin();
	BASIC_TIMCLKEnable(TIM6, ENABLE);
	TenMinTimer_Init();


	while(1)
	{
		ADC_Init_LR(ADC1);

		ADC_Init_UD(ADC1);

		ServoHandle();

		ButtonHandle();

		PositionSetting();

		AutoArmMover();

		PCBTimer();

		DeveloperSlosher();

	}

}
